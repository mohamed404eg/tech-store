@use "../_variables/variables";

@mixin responsive($responsive-breakpoints) {
  // If the breakpoint exists in the map.
  @if map-has-key($responsive-breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($responsive-breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// flex & flex-direction: row & align-items: center;
@mixin flex($direction: normal, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin trans($t: 400) {
  transition: all ease-in-out #{$t}ms;
}

@mixin intro($A: Y) {
  animation: in forwards 400ms;
  @keyframes in {
    0% {
      transform: translate#{$A }(-200%);
      opacity: 0;
    }
    100% {
      transform: translate#{$A }(0);
      opacity: 1;
    }
  }
}
@mixin out($A: Y) {
  animation: in forwards 400ms;
  @keyframes in {
    0% {
      transform: translate#{$A }(-200%);
      opacity: 0;
    }
    100% {
      transform: translate#{$A }(0);
      opacity: 1;
    }
  }
}


/**
 * b-w mixin
 * ------------
 * Sets the flex-basis and max-width properties with the passed values.
 *
 * Usage:
 * ------
 * .element {
 *   @include b-w(50%, 500px);
 * }
 *
 * Output:
 * -------
 * .element {
 *   flex-basis: 50%;
 *   max-width: 500px;
 * }
 *
 * @param {length} $b - Optional. The flex-basis value. Default is 100%.
 * @param {length} $w - Optional. The max-width value. Default is 100%.
 */
 @mixin b-w($b: 100%, $w: 100%) {
  flex-basis: $b;
  max-width: $w;
}
@mixin b-w($b: 100%, $w: 100%) {
  flex-basis: $b;
  max-width: $w;
}
